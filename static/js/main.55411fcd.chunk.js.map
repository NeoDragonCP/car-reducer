{"version":3,"sources":["components/DropdownElement.jsx","App.js","serviceWorker.js","index.js"],"names":["DropdownElement","props","dropdownLabel","options","useState","selectedValue","updateSelectedValue","useEffect","console","log","htmlFor","id","value","onChange","e","target","onBlur","disabled","length","map","item","key","OrderPanel","styled","div","Card","selected","InfoPanel","OrderButton","button","App","cardSelected","setCardSelected","carModels","name","className","style","display","flexDirection","overflow","model","index","placeContent","textAlign","card","onClick","marginTop","marginBottom","paddingRight","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kPA8BeA,EA5BS,SAACC,GAAW,IAC1BC,EAA2BD,EAA3BC,cAAeC,EAAYF,EAAZE,QADU,EAEYC,mBAASD,EAAQ,IAF7B,mBAE1BE,EAF0B,KAEXC,EAFW,KAQjC,OAJAC,qBAAU,WACRC,QAAQC,IAAR,0BAA+BP,EAA/B,oBAAwDG,MACvD,CAACH,EAAeG,IAGjB,oCACE,2BAAOK,QAASR,GAAgBA,GAChC,4BACES,GAAIT,EACJU,MAAOP,EACPQ,SAAU,SAACC,GAAD,OAAOR,EAAoBQ,EAAEC,OAAOH,QAC9CI,OAAQ,SAACF,GAAD,OAAOR,EAAoBQ,EAAEC,OAAOH,QAC5CK,UAAWd,EAAQe,QAElBf,EAAQgB,KAAI,SAACC,GAAD,OACX,4BAAQC,IAAKD,EAAMR,MAAOQ,GACvBA,S,ktEChBb,IAAME,EAAaC,IAAOC,IAAV,KAYVC,EAAOF,IAAOC,IAAV,KAsBE,mBAAgC,IAAhC,EAAGE,SAAoC,oBAAsB,MAuBrD,mBAAgC,IAAhC,EAAGA,SAAoC,WAAa,MAKlEC,EAAYJ,IAAOC,IAAV,KAuBTI,EAAcL,IAAOM,OAAV,KAsHFC,MA5Ef,WAAgB,IAAD,EAC2B1B,mBAAS,GADpC,mBACN2B,EADM,KACQC,EADR,OAEa5B,mBAAS,OAFtB,6BAYb,IAAM6B,EAAY,CAChB,CAAEC,KAAM,iBACR,CAAEA,KAAM,kBACR,CAAEA,KAAM,kBACR,CAAEA,KAAM,kBAGV,OACE,yBAAKC,UAAU,OACb,kBAACb,EAAD,KACE,qCACA,yBACEc,MAAO,CACLC,QAAS,OACTC,cAAe,MACfC,SAAU,SAGXN,EAAUd,KAAI,SAACqB,EAAOC,GAAR,OACb,yBACEpB,IAAKoB,EACLL,MAAO,CACLC,QAAS,OACTC,cAAe,SACfI,aAAc,SACdC,UAAW,WAGb,kBAAClB,EAAD,CACEC,UArCakB,EAqCeH,EAAQ,EApC5CG,IAASb,GAqCDc,QAAS,kBAAMb,EAAgBS,EAAQ,KAEvC,yBAAKN,UAAU,sBAEjB,uBACEA,UAAU,cACVC,MAAO,CACLU,UAAW,OACXC,aAAc,OACdC,aAAc,SAGfR,EAAMN,OAlDrB,IAA2BU,MAuDrB,qCACA,kBAAC,EAAD,CACE1C,cAAc,GACdC,QAAS,CAAC,MAAO,SAAU,OAAQ,YAGvC,kBAACwB,EAAD,KACE,4BAAKM,EAAUF,EAAe,GAAGG,MACjC,kBAACN,EAAD,KACE,uBAAGO,UAAU,yBADf,kBC5LYc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1D,QAAQ0D,MAAMA,EAAMC,c","file":"static/js/main.55411fcd.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nconst DropdownElement = (props) => {\r\n  const { dropdownLabel, options } = props;\r\n  const [selectedValue, updateSelectedValue] = useState(options[0]);\r\n\r\n  useEffect(() => {\r\n    console.log(`Dropdown Label: ${dropdownLabel}\\nValue: ${selectedValue}`);\r\n  }, [dropdownLabel, selectedValue]);\r\n\r\n  return (\r\n    <>\r\n      <label htmlFor={dropdownLabel}>{dropdownLabel}</label>\r\n      <select\r\n        id={dropdownLabel}\r\n        value={selectedValue}\r\n        onChange={(e) => updateSelectedValue(e.target.value)}\r\n        onBlur={(e) => updateSelectedValue(e.target.value)}\r\n        disabled={!options.length}\r\n      >\r\n        {options.map((item) => (\r\n          <option key={item} value={item}>\r\n            {item}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DropdownElement;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport styled from \"styled-components\";\n\nimport DropdownElement from \"./components/DropdownElement.jsx\";\n\nconst OrderPanel = styled.div`\n  padding: 1rem;\n\n  display: flex;\n  flex-direction: column;\n  flex: 1 1 auto;\n\n  h2 {\n    color: #145374;\n  }\n`;\n\nconst Card = styled.div`\n  position: relative;\n  width: 200px;\n  height: 200px;\n\n  margin: 1rem 3rem 1rem 0;\n\n  background: #e8e8e8;\n  box-shadow: 0px 2px 4px rgba(0, 51, 78, 0.1);\n\n  flex: 0 0 auto;\n\n  border-radius: 10px;\n\n  transition: all 0.2s;\n\n  :hover {\n    box-shadow: 0px 10px 6px rgba(20, 83, 116, 0.2);\n    transform: translateY(-10px);\n  }\n\n  /*Selected */\n  border: ${({ selected }) => (selected === true ? \"2px solid #145374\" : \"\")};\n  .select-indicator {\n    z-index: 10;\n    position: absolute;\n    width: 30px;\n    height: 30px;\n    border-radius: 100%;\n\n    background: #f6f5f5;\n    bottom: 10px;\n    right: 10px;\n\n    display: flex;\n    place-content: center;\n\n    ::after {\n      position: absolute;\n      top: 3px;\n\n      content: \"\";\n      width: 24px;\n      height: 24px;\n      border-radius: 100%;\n      background: ${({ selected }) => (selected === true ? \" #145374\" : \"\")};\n    }\n  }\n`;\n\nconst InfoPanel = styled.div`\n  z-index: 200;\n  position: fixed;\n  width: 300px;\n  height: 100vh;\n  padding: 1rem;\n  background: #00334e;\n  color: #f6f5f5;\n  right: 0;\n\n  display: flex;\n  flex-direction: column;\n  align-items: left;\n  text-align: left;\n\n  @media (max-width: 768px) {\n    position: fixed;\n    width: 100%;\n    height: auto;\n    bottom: 0;\n  }\n`;\n\nconst OrderButton = styled.button`\n  position: absolute;\n  right: 30px;\n  bottom: 0;\n\n  margin: 2rem 0 2rem 0;\n  padding: 1rem 2rem 1rem 2rem;\n  background: #ee5757;\n  color: #f6f5f5;\n  border-radius: 60px;\n  text-transform: uppercase;\n  font-weight: bold;\n  font-size: 18px;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  cursor: pointer;\n\n  /* remove button styles */\n  outline: none;\n  border: none;\n\n  transition: all 0.2s;\n\n  i {\n    margin-right: 1rem;\n  }\n\n  @media (max-width: 768px) {\n    margin: 2rem 0 0.5rem 0;\n    position: relative;\n    right: 0;\n  }\n\n  :hover {\n    transform: scale(1.05);\n    box-shadow: 0px 0px 14px rgba(255, 255, 255, 0.2);\n  }\n`;\n\nfunction App() {\n  const [cardSelected, setCardSelected] = useState(1);\n  const [color, setColor] = useState(\"red\");\n\n  function checkCardSelected(card) {\n    if (card === cardSelected) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  const carModels = [\n    { name: \"Neo Speedster\" },\n    { name: \"Behtony Lagoon\" },\n    { name: \"Kelz Hatchback\" },\n    { name: \"Kron Roadster\" },\n  ];\n\n  return (\n    <div className=\"App\">\n      <OrderPanel>\n        <h2>Model</h2>\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            overflow: \"auto\",\n          }}\n        >\n          {carModels.map((model, index) => (\n            <div\n              key={index}\n              style={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                placeContent: \"center\",\n                textAlign: \"center\",\n              }}\n            >\n              <Card\n                selected={checkCardSelected(index + 1)}\n                onClick={() => setCardSelected(index + 1)}\n              >\n                <div className=\"select-indicator\" />\n              </Card>\n              <p\n                className=\"model-label\"\n                style={{\n                  marginTop: \"1rem\",\n                  marginBottom: \"2rem\",\n                  paddingRight: \"3rem\",\n                }}\n              >\n                {model.name}\n              </p>\n            </div>\n          ))}\n        </div>\n        <h2>Color</h2>\n        <DropdownElement\n          dropdownLabel=\"\"\n          options={[\"red\", \"silver\", \"navy\", \"black\"]}\n        />\n      </OrderPanel>\n      <InfoPanel>\n        <h1>{carModels[cardSelected - 1].name}</h1>\n        <OrderButton>\n          <i className=\"fas fa-shopping-cart\"></i>\n          Place Order\n        </OrderButton>\n      </InfoPanel>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}